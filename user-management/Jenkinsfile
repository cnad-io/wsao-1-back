pipeline {
  agent {
    label "master"
  }
  environment {
    PIPELINES_NAMESPACE = "dino-rush-ci-cd"
    APP_NAME = "user-management"
    JENKINS_TAG = "${JOB_NAME}.${BUILD_NUMBER}".replace("/", "-")
    JOB_NAME = "${JOB_NAME}".replace("/", "-")
    GIT_CREDENTIALS = credentials('dino-rush-ci-cd-git-auth')
    GIT_DOMAIN = "github.com"
    GIT_PROJECT = "cnad-io"
    GIT_REPOSITORY = "wsao-1-back"
  }
  options {
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 15, unit: 'MINUTES')
  }
  stages {
    stage("prepare environment for master deploy") {
      agent {
        node {
          label "master"
        }
      }
      when {
        expression { GIT_BRANCH ==~ /(.*master)/ }
      }
      steps {
        script {
          env.PROJECT_NAMESPACE = "dino-rush-prod"
        }
      }
    }
    stage("prepare environment for develop deploy") {
      agent {
        node {
          label "master"
        }
      }
      when {
        expression { GIT_BRANCH ==~ /(.*develop)/ }
      }
      steps {
        script {
          env.PROJECT_NAMESPACE = "dino-rush-non-prod"
        }
      }
    }
    stage("Build and test code, and  build container image as well") {
      agent {
        node {
          label "master"
        }
      }
      steps {
        sh 'ls -ltr'

        echo '### Running build and Tests ###'
        sh './mvnw package -Pnative -Dnative-image.docker-build=true'

        echo '### Create Linux Container Image from package ###'
        sh '''
          oc patch bc ${APP_NAME} -p "{\\"spec\\":{\\"output\\":{\\"to\\":{\\"kind\\":\\"ImageStreamTag\\",\\"name\\":\\"${APP_NAME}:${JENKINS_TAG}\\"}}}}" -n ${PIPELINES_NAMESPACE}
          oc start-build ${APP_NAME} --from-dir=. --follow -n ${PIPELINES_NAMESPACE}
        '''
      }
      post {
        always {
          archive "**"
          junit 'target/surefire-reports/TEST-*.xml'
        }
        success {
          echo "Git tagging"
          sh '''
            git tag -a ${JENKINS_TAG} -m "JENKINS automated commit"
            git push https://${GIT_CREDENTIALS_USR}:${GIT_CREDENTIALS_PSW}@${GIT_DOMAIN}/${GIT_PROJECT}/${GIT_REPOSITORY}.git --tags
          '''
        }
        failure {
          echo "FAILURE"
        }
      }
    }
    stage("Deploy container image") {
      agent {
        node {
          label "master"
        }
      }
      when {
        expression { GIT_BRANCH ==~ /(.*master|.*develop)/ }
      }
      steps {
        echo '### tag image for namespace ###'
        sh '''
          oc tag ${PIPELINES_NAMESPACE}/${APP_NAME}:${JENKINS_TAG} ${PROJECT_NAMESPACE}/${APP_NAME}:${JENKINS_TAG} -n ${PROJECT_NAMESPACE}
        '''
        echo '### set env vars and image for deployment ###'
        sh '''
          oc set image dc/${APP_NAME} ${APP_NAME}=docker-registry.default.svc:5000/${PROJECT_NAMESPACE}/${APP_NAME}:${JENKINS_TAG} -n ${PROJECT_NAMESPACE}
          oc rollout latest dc/${APP_NAME} -n ${PROJECT_NAMESPACE}
        '''
        echo '### Verify OCP Deployment ###'
        openshiftVerifyDeployment depCfg: env.APP_NAME,
          namespace: env.PROJECT_NAMESPACE,
          replicaCount: '1',
          verbose: 'false',
          verifyReplicaCount: 'true',
          waitTime: '',
          waitUnit: 'sec'
      }
    }
  }
}
